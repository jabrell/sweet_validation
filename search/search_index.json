{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"api/","title":"API","text":""},{"location":"api/#sweet_validation.columns.Column","title":"<code>sweet_validation.columns.Column</code>","text":"<p>A column is defined as a list of items and a frictionless Field object.</p> <p>Columns roughly behave like lists but is checked against the Field object.</p> <p>Attributes:</p> Name Type Description <code>field</code> <code>Field</code> <p>A frictionless Field object.</p> <code>items</code> <code>list</code> <p>A list of items. It can only modified during instantiation, or by using the append, extend, or replace methods.</p> <code>name</code> <code>str</code> <p>The name of the column defined in the field object. Read-only. It can be modified via the field object.</p> <code>description</code> <code>str</code> <p>The description of the column defined in the field object. Read-only. It can be modified via the field object.</p> <code>type</code> <code>str</code> <p>The type of the column defined in the field object. Read-only. It can be modified via the field object.</p> <p>Raises:</p> Type Description <code>ValidationError</code> <p>If the items are not valid given the Field object.</p> <p>The field object defines the type and constraints of the column and is based on the frictionless.Field object. The items are validated against this field every time they are appended or extended.</p> <p>For more information on the Field object, see: - Field types     under \"Data Fields\" - Constraints - Table and Field Scheme standard</p> <p>Examples:</p> <pre><code>from frictionless.fields import IntegerField\nfield=IntegerField(name=\"test\", constraints={\"minimum\": 1, \"maximum\": 3})\ncol = Column(field=field, items=[1, 2, 3])\n</code></pre> Source code in <code>sweet_validation/columns/columns.py</code> <pre><code>class Column:\n    \"\"\"A column is defined as a list of items and a frictionless Field object.\n\n    Columns roughly behave like lists but is checked against the Field object.\n\n    Attributes:\n        field (Field): A frictionless Field object.\n        items (list): A list of items. It can only modified during instantiation,\n            or by using the append, extend, or replace methods.\n        name (str): The name of the column defined in the field object. Read-only.\n            It can be modified via the field object.\n        description (str): The description of the column defined in the field object.\n            Read-only. It can be modified via the field object.\n        type (str): The type of the column defined in the field object. Read-only.\n            It can be modified via the field object.\n\n    Raises:\n        ValidationError: If the items are not valid given the Field object.\n\n    The field object defines the type and constraints of the column and is based\n    on the frictionless.Field object. The items are validated against this field\n    every time they are appended or extended.\n\n    For more information on the Field object, see:\n    - [Field types](https://framework.frictionlessdata.io/docs/fields/any.html)\n        under \"Data Fields\"\n    - [Constraints](https://specs.frictionlessdata.io/table-schema/#constraints)\n    - [Table and Field Scheme standard](https://specs.frictionlessdata.io/table-schema/#constraints)\n\n    Examples:\n\n    ```python\n    from frictionless.fields import IntegerField\n    field=IntegerField(name=\"test\", constraints={\"minimum\": 1, \"maximum\": 3})\n    col = Column(field=field, items=[1, 2, 3])\n    ```\n\n    \"\"\"\n\n    _items: list[Any]\n\n    def __init__(self, field: Field, items: list[Any] | None = None):\n        self.field = field\n        if items:\n            self._raise_on_validation(items=items)\n        self._items = items or []\n\n    @property\n    def items(self) -&gt; list[Any]:\n        \"\"\"Return the items of the column.\"\"\"\n        return self._items\n\n    @items.setter\n    def items(self, items: list[Any]) -&gt; None:\n        \"\"\"Set the items of the column.\"\"\"\n        raise AttributeError(\"Cannot set the items of a column. Use append or extend\")\n\n    @property\n    def name(self) -&gt; str:\n        \"\"\"Return the name of the column defined in the field object\"\"\"\n        return self.field.name\n\n    @name.setter\n    def name(self, name: str) -&gt; None:\n        raise AttributeError(\n            \"Cannot set the name of a column. Set the name of the field object instead.\"\n        )\n\n    @property\n    def description(self) -&gt; str | None:\n        \"\"\"Return the description of the column defined in the field object\"\"\"\n        return self.field.description\n\n    @description.setter\n    def description(self, description: str) -&gt; None:\n        raise AttributeError(\n            \"Cannot set the description of a column. Set the description of the field object instead.\"  # noqa\n        )\n\n    @property\n    def type(self) -&gt; str:\n        \"\"\"Return the type of the column defined in the field object\"\"\"\n        return self.field.type\n\n    @type.setter\n    def type(self, type: str) -&gt; None:\n        \"\"\"Set the type of the column defined in the field object\"\"\"\n        raise AttributeError(\n            \"Cannot set the type of a column. Set the type of the field object instead.\"\n        )\n\n    def append(self, item: Any) -&gt; None:\n        \"\"\"Append an item to the column items.\n\n        Args:\n            item (Any): An item to append to the column items.\n\n        Raises:\n            ValidationError: If the item is not valid.\n        \"\"\"\n        new_items = self.items + [item]\n        self._raise_on_validation(items=new_items)\n        self._items = new_items\n\n    def extend(self, items: Iterable[Any]) -&gt; None:\n        \"\"\"Extend the column items with a list of items.\n\n        Args:\n            items (list): A list of items to extend the column items.\n\n        Raises:\n            ValidationError: If the items are not valid.\n        \"\"\"\n        new_items = self.items + list(items)\n        self._raise_on_validation(items=new_items)\n        self._items = new_items\n\n    def replace(self, items: list[Any]) -&gt; None:\n        \"\"\"Replace the column items with a list of items.\n\n        Args:\n            items (list): A list of items to replace the column items.\n\n        Raises:\n            ValidationError: If the items are not valid.\n        \"\"\"\n        self._raise_on_validation(items=items)\n        self._items = items\n\n    def _raise_on_validation(self, items: list[Any] | None = None) -&gt; None:\n        \"\"\"Raise a ValidationError if the items are not valid.\n\n        Args:\n            items (list): A list of items. If None, the column items are used.\n\n        Raises:\n            ValidationError: If the items are not valid.\n        \"\"\"\n        items = items or self.items\n        rep = self.validate_items(items=items)\n        if not rep.valid:\n            raise ValidationError(report=rep)\n\n    def validate_items(self, items: list[Any] | None = None) -&gt; Report:\n        \"\"\"Validate a list of items against the Field object.\n\n        Args:\n            items (list): A list of items.\n\n        Raises:\n            ValueError: If the items are not valid.\n        \"\"\"\n        items = items or self.items\n        return self.get_resource(items=items).validate()\n\n    def get_resource(self, items: list[Any] | None) -&gt; Resource:\n        \"\"\"Return a Resource object with the column items.\n\n        Args:\n            items (list): A list of items. If None, the column items are used.\"\"\"\n        items = items or self.items\n        data = [[self.field.name]] + [[i] for i in items]\n        return Resource(data=data, schema=Schema(fields=[self.field]))\n\n    def __len__(self) -&gt; int:\n        \"\"\"Returns the number of items\"\"\"\n        return len(self.items)\n</code></pre>"},{"location":"api/#sweet_validation.columns.Column.__init__","title":"<code>__init__(field, items=None)</code>","text":"Source code in <code>sweet_validation/columns/columns.py</code> <pre><code>def __init__(self, field: Field, items: list[Any] | None = None):\n    self.field = field\n    if items:\n        self._raise_on_validation(items=items)\n    self._items = items or []\n</code></pre>"},{"location":"api/#sweet_validation.columns.Column.append","title":"<code>append(item)</code>","text":"<p>Append an item to the column items.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Any</code> <p>An item to append to the column items.</p> required <p>Raises:</p> Type Description <code>ValidationError</code> <p>If the item is not valid.</p> Source code in <code>sweet_validation/columns/columns.py</code> <pre><code>def append(self, item: Any) -&gt; None:\n    \"\"\"Append an item to the column items.\n\n    Args:\n        item (Any): An item to append to the column items.\n\n    Raises:\n        ValidationError: If the item is not valid.\n    \"\"\"\n    new_items = self.items + [item]\n    self._raise_on_validation(items=new_items)\n    self._items = new_items\n</code></pre>"},{"location":"api/#sweet_validation.columns.Column.replace","title":"<code>replace(items)</code>","text":"<p>Replace the column items with a list of items.</p> <p>Parameters:</p> Name Type Description Default <code>items</code> <code>list</code> <p>A list of items to replace the column items.</p> required <p>Raises:</p> Type Description <code>ValidationError</code> <p>If the items are not valid.</p> Source code in <code>sweet_validation/columns/columns.py</code> <pre><code>def replace(self, items: list[Any]) -&gt; None:\n    \"\"\"Replace the column items with a list of items.\n\n    Args:\n        items (list): A list of items to replace the column items.\n\n    Raises:\n        ValidationError: If the items are not valid.\n    \"\"\"\n    self._raise_on_validation(items=items)\n    self._items = items\n</code></pre>"},{"location":"api/#sweet_validation.columns.Column.get_resource","title":"<code>get_resource(items)</code>","text":"<p>Return a Resource object with the column items.</p> <p>Parameters:</p> Name Type Description Default <code>items</code> <code>list</code> <p>A list of items. If None, the column items are used.</p> required Source code in <code>sweet_validation/columns/columns.py</code> <pre><code>def get_resource(self, items: list[Any] | None) -&gt; Resource:\n    \"\"\"Return a Resource object with the column items.\n\n    Args:\n        items (list): A list of items. If None, the column items are used.\"\"\"\n    items = items or self.items\n    data = [[self.field.name]] + [[i] for i in items]\n    return Resource(data=data, schema=Schema(fields=[self.field]))\n</code></pre>"},{"location":"api/#sweet_validation.columns.Column.validate_items","title":"<code>validate_items(items=None)</code>","text":"<p>Validate a list of items against the Field object.</p> <p>Parameters:</p> Name Type Description Default <code>items</code> <code>list</code> <p>A list of items.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the items are not valid.</p> Source code in <code>sweet_validation/columns/columns.py</code> <pre><code>def validate_items(self, items: list[Any] | None = None) -&gt; Report:\n    \"\"\"Validate a list of items against the Field object.\n\n    Args:\n        items (list): A list of items.\n\n    Raises:\n        ValueError: If the items are not valid.\n    \"\"\"\n    items = items or self.items\n    return self.get_resource(items=items).validate()\n</code></pre>"}]}